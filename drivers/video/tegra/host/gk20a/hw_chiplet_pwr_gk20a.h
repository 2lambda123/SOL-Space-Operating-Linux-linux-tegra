/*
 * drivers/video/tegra/host/gk20a/hw_chiplet_pwr_gk20a.h
 *
 * Copyright (c) 2012, NVIDIA Corporation.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

 /*
  * Function naming determines intended use:
  *
  *     <x>_r(void) : Returns the offset for register <x>.
  *
  *     <x>_w(void) : Returns the word offset for word (4 byte) element <x>.
  *
  *     <x>_<y>_s(void) : Returns size of field <y> of register <x> in bits.
  *
  *     <x>_<y>_f(u32 v) : Returns a value based on 'v' which has been shifted
  *         and masked to place it at field <y> of register <x>.  This value
  *         can be |'d with others to produce a full register value for
  *         register <x>.
  *
  *     <x>_<y>_m(void) : Returns a mask for field <y> of register <x>.  This
  *         value can be ~'d and then &'d to clear the value of field <y> for
  *         register <x>.
  *
  *     <x>_<y>_<z>_f(void) : Returns the constant value <z> after being shifted
  *         to place it at field <y> of register <x>.  This value can be |'d
  *         with others to produce a full register value for <x>.
  *
  *     <x>_<y>_v(u32 r) : Returns the value of field <y> from a full register
  *         <x> value 'r' after being shifted to place its LSB at bit 0.
  *         This value is suitable for direct comparison with other unshifted
  *         values appropriate for use in field <y> of register <x>.
  *
  *     <x>_<y>_<z>_v(void) : Returns the constant value for <z> defined for
  *         field <y> of register <x>.  This value is suitable for direct
  *         comparison with unshifted values appropriate for use in field <y>
  *         of register <x>.
  */

#ifndef __hw_chiplet_pwr_gk20a_h__
#define __hw_chiplet_pwr_gk20a_h__
/*This file is autogenerated.  Do not edit. */

static inline u32 chiplet_pwr_gpcs_weight_6_r(void)
{
	return 0x0010e018;
}
static inline u32 chiplet_pwr_gpcs_weight_6_tex_s(void)
{
	return 8;
}
static inline u32 chiplet_pwr_gpcs_weight_6_tex_f(u32 v)
{
	return (v & 0xff) << 0;
}
static inline u32 chiplet_pwr_gpcs_weight_6_tex_m(void)
{
	return 0xff << 0;
}
static inline u32 chiplet_pwr_gpcs_weight_6_tex_v(u32 r)
{
	return (r >> 0) & 0xff;
}
static inline u32 chiplet_pwr_gpcs_weight_6_tex_zero_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_gpcs_weight_6_tex_zero_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_gpcs_weight_6_l1c_s(void)
{
	return 5;
}
static inline u32 chiplet_pwr_gpcs_weight_6_l1c_f(u32 v)
{
	return (v & 0x1f) << 8;
}
static inline u32 chiplet_pwr_gpcs_weight_6_l1c_m(void)
{
	return 0x1f << 8;
}
static inline u32 chiplet_pwr_gpcs_weight_6_l1c_v(u32 r)
{
	return (r >> 8) & 0x1f;
}
static inline u32 chiplet_pwr_gpcs_weight_6_l1c_zero_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_gpcs_weight_6_l1c_zero_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_gpcs_weight_6_mpc_s(void)
{
	return 5;
}
static inline u32 chiplet_pwr_gpcs_weight_6_mpc_f(u32 v)
{
	return (v & 0x1f) << 16;
}
static inline u32 chiplet_pwr_gpcs_weight_6_mpc_m(void)
{
	return 0x1f << 16;
}
static inline u32 chiplet_pwr_gpcs_weight_6_mpc_v(u32 r)
{
	return (r >> 16) & 0x1f;
}
static inline u32 chiplet_pwr_gpcs_weight_6_mpc_zero_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_gpcs_weight_6_mpc_zero_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_gpcs_weight_6_pe_s(void)
{
	return 8;
}
static inline u32 chiplet_pwr_gpcs_weight_6_pe_f(u32 v)
{
	return (v & 0xff) << 24;
}
static inline u32 chiplet_pwr_gpcs_weight_6_pe_m(void)
{
	return 0xff << 24;
}
static inline u32 chiplet_pwr_gpcs_weight_6_pe_v(u32 r)
{
	return (r >> 24) & 0xff;
}
static inline u32 chiplet_pwr_gpcs_weight_6_pe_zero_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_gpcs_weight_6_pe_zero_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_gpcs_weight_7_r(void)
{
	return 0x0010e01c;
}
static inline u32 chiplet_pwr_gpcs_weight_7_sm_s(void)
{
	return 8;
}
static inline u32 chiplet_pwr_gpcs_weight_7_sm_f(u32 v)
{
	return (v & 0xff) << 0;
}
static inline u32 chiplet_pwr_gpcs_weight_7_sm_m(void)
{
	return 0xff << 0;
}
static inline u32 chiplet_pwr_gpcs_weight_7_sm_v(u32 r)
{
	return (r >> 0) & 0xff;
}
static inline u32 chiplet_pwr_gpcs_weight_7_sm_zero_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_gpcs_weight_7_sm_zero_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_gpcs_weight_7_cbmgr_s(void)
{
	return 5;
}
static inline u32 chiplet_pwr_gpcs_weight_7_cbmgr_f(u32 v)
{
	return (v & 0x1f) << 8;
}
static inline u32 chiplet_pwr_gpcs_weight_7_cbmgr_m(void)
{
	return 0x1f << 8;
}
static inline u32 chiplet_pwr_gpcs_weight_7_cbmgr_v(u32 r)
{
	return (r >> 8) & 0x1f;
}
static inline u32 chiplet_pwr_gpcs_weight_7_cbmgr_zero_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_gpcs_weight_7_cbmgr_zero_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_gpcs_weight_7_wwdx_s(void)
{
	return 5;
}
static inline u32 chiplet_pwr_gpcs_weight_7_wwdx_f(u32 v)
{
	return (v & 0x1f) << 16;
}
static inline u32 chiplet_pwr_gpcs_weight_7_wwdx_m(void)
{
	return 0x1f << 16;
}
static inline u32 chiplet_pwr_gpcs_weight_7_wwdx_v(u32 r)
{
	return (r >> 16) & 0x1f;
}
static inline u32 chiplet_pwr_gpcs_weight_7_wwdx_zero_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_gpcs_weight_7_wwdx_zero_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_gpcs_weight_7_pes_s(void)
{
	return 5;
}
static inline u32 chiplet_pwr_gpcs_weight_7_pes_f(u32 v)
{
	return (v & 0x1f) << 24;
}
static inline u32 chiplet_pwr_gpcs_weight_7_pes_m(void)
{
	return 0x1f << 24;
}
static inline u32 chiplet_pwr_gpcs_weight_7_pes_v(u32 r)
{
	return (r >> 24) & 0x1f;
}
static inline u32 chiplet_pwr_gpcs_weight_7_pes_zero_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_gpcs_weight_7_pes_zero_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_gpcs_config_1_r(void)
{
	return 0x0010e03c;
}
static inline u32 chiplet_pwr_gpcs_config_1_ba_enable_s(void)
{
	return 1;
}
static inline u32 chiplet_pwr_gpcs_config_1_ba_enable_f(u32 v)
{
	return (v & 0x1) << 0;
}
static inline u32 chiplet_pwr_gpcs_config_1_ba_enable_m(void)
{
	return 0x1 << 0;
}
static inline u32 chiplet_pwr_gpcs_config_1_ba_enable_v(u32 r)
{
	return (r >> 0) & 0x1;
}
static inline u32 chiplet_pwr_gpcs_config_1_ba_enable_no_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_gpcs_config_1_ba_enable_no_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_gpcs_config_1_ba_enable_yes_v(void)
{
	return 0x00000001;
}
static inline u32 chiplet_pwr_gpcs_config_1_ba_enable_yes_f(void)
{
	return 0x1;
}
static inline u32 chiplet_pwr_fbps_weight_0_r(void)
{
	return 0x0010e100;
}
static inline u32 chiplet_pwr_fbps_weight_0_crop_s(void)
{
	return 8;
}
static inline u32 chiplet_pwr_fbps_weight_0_crop_f(u32 v)
{
	return (v & 0xff) << 0;
}
static inline u32 chiplet_pwr_fbps_weight_0_crop_m(void)
{
	return 0xff << 0;
}
static inline u32 chiplet_pwr_fbps_weight_0_crop_v(u32 r)
{
	return (r >> 0) & 0xff;
}
static inline u32 chiplet_pwr_fbps_weight_0_crop_zero_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_fbps_weight_0_crop_zero_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_fbps_weight_0_zrop_s(void)
{
	return 8;
}
static inline u32 chiplet_pwr_fbps_weight_0_zrop_f(u32 v)
{
	return (v & 0xff) << 8;
}
static inline u32 chiplet_pwr_fbps_weight_0_zrop_m(void)
{
	return 0xff << 8;
}
static inline u32 chiplet_pwr_fbps_weight_0_zrop_v(u32 r)
{
	return (r >> 8) & 0xff;
}
static inline u32 chiplet_pwr_fbps_weight_0_zrop_zero_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_fbps_weight_0_zrop_zero_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_fbps_weight_0_rdm_s(void)
{
	return 5;
}
static inline u32 chiplet_pwr_fbps_weight_0_rdm_f(u32 v)
{
	return (v & 0x1f) << 16;
}
static inline u32 chiplet_pwr_fbps_weight_0_rdm_m(void)
{
	return 0x1f << 16;
}
static inline u32 chiplet_pwr_fbps_weight_0_rdm_v(u32 r)
{
	return (r >> 16) & 0x1f;
}
static inline u32 chiplet_pwr_fbps_weight_0_rdm_zero_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_fbps_weight_0_rdm_zero_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_fbps_weight_0_fbpa_s(void)
{
	return 8;
}
static inline u32 chiplet_pwr_fbps_weight_0_fbpa_f(u32 v)
{
	return (v & 0xff) << 24;
}
static inline u32 chiplet_pwr_fbps_weight_0_fbpa_m(void)
{
	return 0xff << 24;
}
static inline u32 chiplet_pwr_fbps_weight_0_fbpa_v(u32 r)
{
	return (r >> 24) & 0xff;
}
static inline u32 chiplet_pwr_fbps_weight_0_fbpa_zero_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_fbps_weight_0_fbpa_zero_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_fbps_weight_1_r(void)
{
	return 0x0010e104;
}
static inline u32 chiplet_pwr_fbps_weight_1_ltc_s(void)
{
	return 8;
}
static inline u32 chiplet_pwr_fbps_weight_1_ltc_f(u32 v)
{
	return (v & 0xff) << 0;
}
static inline u32 chiplet_pwr_fbps_weight_1_ltc_m(void)
{
	return 0xff << 0;
}
static inline u32 chiplet_pwr_fbps_weight_1_ltc_v(u32 r)
{
	return (r >> 0) & 0xff;
}
static inline u32 chiplet_pwr_fbps_weight_1_ltc_zero_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_fbps_weight_1_ltc_zero_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_fbps_config_1_r(void)
{
	return 0x0010e13c;
}
static inline u32 chiplet_pwr_fbps_config_1_ba_enable_s(void)
{
	return 1;
}
static inline u32 chiplet_pwr_fbps_config_1_ba_enable_f(u32 v)
{
	return (v & 0x1) << 0;
}
static inline u32 chiplet_pwr_fbps_config_1_ba_enable_m(void)
{
	return 0x1 << 0;
}
static inline u32 chiplet_pwr_fbps_config_1_ba_enable_v(u32 r)
{
	return (r >> 0) & 0x1;
}
static inline u32 chiplet_pwr_fbps_config_1_ba_enable_no_v(void)
{
	return 0x00000000;
}
static inline u32 chiplet_pwr_fbps_config_1_ba_enable_no_f(void)
{
	return 0x0;
}
static inline u32 chiplet_pwr_fbps_config_1_ba_enable_yes_v(void)
{
	return 0x00000001;
}
static inline u32 chiplet_pwr_fbps_config_1_ba_enable_yes_f(void)
{
	return 0x1;
}

#endif /* __hw_chiplet_pwr_gk20a_h__ */
