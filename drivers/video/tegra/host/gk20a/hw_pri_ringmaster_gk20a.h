/*
 * drivers/video/tegra/host/gk20a/hw_pri_ringmaster_gk20a.h
 *
 * Copyright (c) 2012, NVIDIA Corporation.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

 /*
  * Function naming determines intended use:
  *
  *     <x>_r(void) : Returns the offset for register <x>.
  *
  *     <x>_w(void) : Returns the word offset for word (4 byte) element <x>.
  *
  *     <x>_<y>_s(void) : Returns size of field <y> of register <x> in bits.
  *
  *     <x>_<y>_f(u32 v) : Returns a value based on 'v' which has been shifted
  *         and masked to place it at field <y> of register <x>.  This value
  *         can be |'d with others to produce a full register value for
  *         register <x>.
  *
  *     <x>_<y>_m(void) : Returns a mask for field <y> of register <x>.  This
  *         value can be ~'d and then &'d to clear the value of field <y> for
  *         register <x>.
  *
  *     <x>_<y>_<z>_f(void) : Returns the constant value <z> after being shifted
  *         to place it at field <y> of register <x>.  This value can be |'d
  *         with others to produce a full register value for <x>.
  *
  *     <x>_<y>_v(u32 r) : Returns the value of field <y> from a full register
  *         <x> value 'r' after being shifted to place its LSB at bit 0.
  *         This value is suitable for direct comparison with other unshifted
  *         values appropriate for use in field <y> of register <x>.
  *
  *     <x>_<y>_<z>_v(void) : Returns the constant value for <z> defined for
  *         field <y> of register <x>.  This value is suitable for direct
  *         comparison with unshifted values appropriate for use in field <y>
  *         of register <x>.
  */

#ifndef __hw_pri_ringmaster_gk20a_h__
#define __hw_pri_ringmaster_gk20a_h__
/*This file is autogenerated.  Do not edit. */

static inline u32 pri_ringmaster_command_r(void)
{
	return 0x0012004c;
}
static inline u32 pri_ringmaster_command_cmd_s(void)
{
	return 6;
}
static inline u32 pri_ringmaster_command_cmd_f(u32 v)
{
	return (v & 0x3f) << 0;
}
static inline u32 pri_ringmaster_command_cmd_m(void)
{
	return 0x3f << 0;
}
static inline u32 pri_ringmaster_command_cmd_v(u32 r)
{
	return (r >> 0) & 0x3f;
}
static inline u32 pri_ringmaster_command_cmd_no_cmd_v(void)
{
	return 0x00000000;
}
static inline u32 pri_ringmaster_command_cmd_no_cmd_f(void)
{
	return 0x0;
}
static inline u32 pri_ringmaster_command_cmd_start_ring_v(void)
{
	return 0x00000001;
}
static inline u32 pri_ringmaster_command_cmd_start_ring_f(void)
{
	return 0x1;
}
static inline u32 pri_ringmaster_command_cmd_ack_interrupt_v(void)
{
	return 0x00000002;
}
static inline u32 pri_ringmaster_command_cmd_ack_interrupt_f(void)
{
	return 0x2;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_v(void)
{
	return 0x00000003;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_f(void)
{
	return 0x3;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_and_start_ring_v(void)
{
	return 0x00000004;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_and_start_ring_f(void)
{
	return 0x4;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_bc_grp_s(void)
{
	return 3;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_bc_grp_f(u32 v)
{
	return (v & 0x7) << 6;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_bc_grp_m(void)
{
	return 0x7 << 6;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_bc_grp_v(u32 r)
{
	return (r >> 6) & 0x7;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_bc_grp_all_v(void)
{
	return 0x00000000;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_bc_grp_all_f(void)
{
	return 0x0;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_bc_grp_gpc_v(void)
{
	return 0x00000001;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_bc_grp_gpc_f(void)
{
	return 0x40;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_bc_grp_fbp_v(void)
{
	return 0x00000002;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_bc_grp_fbp_f(void)
{
	return 0x80;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_bc_grp_sys_v(void)
{
	return 0x00000003;
}
static inline u32 pri_ringmaster_command_cmd_enumerate_stations_bc_grp_sys_f(void)
{
	return 0xc0;
}
static inline u32 pri_ringmaster_command_data_r(void)
{
	return 0x00120048;
}
static inline u32 pri_ringmaster_command_data_start_ring_seed_s(void)
{
	return 8;
}
static inline u32 pri_ringmaster_command_data_start_ring_seed_f(u32 v)
{
	return (v & 0xff) << 0;
}
static inline u32 pri_ringmaster_command_data_start_ring_seed_m(void)
{
	return 0xff << 0;
}
static inline u32 pri_ringmaster_command_data_start_ring_seed_v(u32 r)
{
	return (r >> 0) & 0xff;
}
static inline u32 pri_ringmaster_command_data_start_ring_seed_init_v(void)
{
	return 0x00000053;
}
static inline u32 pri_ringmaster_command_data_start_ring_seed_init_f(void)
{
	return 0x53;
}
static inline u32 pri_ringmaster_start_results_r(void)
{
	return 0x00120050;
}
static inline u32 pri_ringmaster_start_results_connectivity_s(void)
{
	return 1;
}
static inline u32 pri_ringmaster_start_results_connectivity_f(u32 v)
{
	return (v & 0x1) << 0;
}
static inline u32 pri_ringmaster_start_results_connectivity_m(void)
{
	return 0x1 << 0;
}
static inline u32 pri_ringmaster_start_results_connectivity_v(u32 r)
{
	return (r >> 0) & 0x1;
}
static inline u32 pri_ringmaster_start_results_connectivity_pass_v(void)
{
	return 0x00000001;
}
static inline u32 pri_ringmaster_start_results_connectivity_pass_f(void)
{
	return 0x1;
}
static inline u32 pri_ringmaster_start_results_connectivity_fail_v(void)
{
	return 0x00000000;
}
static inline u32 pri_ringmaster_start_results_connectivity_fail_f(void)
{
	return 0x0;
}
static inline u32 pri_ringmaster_intr_status0_r(void)
{
	return 0x00120058;
}
static inline u32 pri_ringmaster_intr_status0_gbl_write_error_fbp_s(void)
{
	return 16;
}
static inline u32 pri_ringmaster_intr_status0_gbl_write_error_fbp_f(u32 v)
{
	return (v & 0xffff) << 16;
}
static inline u32 pri_ringmaster_intr_status0_gbl_write_error_fbp_m(void)
{
	return 0xffff << 16;
}
static inline u32 pri_ringmaster_intr_status0_gbl_write_error_fbp_v(u32 r)
{
	return (r >> 16) & 0xffff;
}
static inline u32 pri_ringmaster_intr_status0_gbl_write_error_fbp_v_v(void)
{
	return 0x00000000;
}
static inline u32 pri_ringmaster_intr_status0_gbl_write_error_fbp_v_f(void)
{
	return 0x0;
}
static inline u32 pri_ringmaster_intr_status0_gbl_write_error_sys_s(void)
{
	return 1;
}
static inline u32 pri_ringmaster_intr_status0_gbl_write_error_sys_f(u32 v)
{
	return (v & 0x1) << 8;
}
static inline u32 pri_ringmaster_intr_status0_gbl_write_error_sys_m(void)
{
	return 0x1 << 8;
}
static inline u32 pri_ringmaster_intr_status0_gbl_write_error_sys_v(u32 r)
{
	return (r >> 8) & 0x1;
}
static inline u32 pri_ringmaster_intr_status0_gbl_write_error_sys_v_v(void)
{
	return 0x00000000;
}
static inline u32 pri_ringmaster_intr_status0_gbl_write_error_sys_v_f(void)
{
	return 0x0;
}
static inline u32 pri_ringmaster_intr_status0_ring_start_conn_fault_s(void)
{
	return 1;
}
static inline u32 pri_ringmaster_intr_status0_ring_start_conn_fault_f(u32 v)
{
	return (v & 0x1) << 0;
}
static inline u32 pri_ringmaster_intr_status0_ring_start_conn_fault_m(void)
{
	return 0x1 << 0;
}
static inline u32 pri_ringmaster_intr_status0_ring_start_conn_fault_v(u32 r)
{
	return (r >> 0) & 0x1;
}
static inline u32 pri_ringmaster_intr_status0_ring_start_conn_fault_v_v(void)
{
	return 0x00000000;
}
static inline u32 pri_ringmaster_intr_status0_ring_start_conn_fault_v_f(void)
{
	return 0x0;
}
static inline u32 pri_ringmaster_intr_status0_disconnect_fault_s(void)
{
	return 1;
}
static inline u32 pri_ringmaster_intr_status0_disconnect_fault_f(u32 v)
{
	return (v & 0x1) << 1;
}
static inline u32 pri_ringmaster_intr_status0_disconnect_fault_m(void)
{
	return 0x1 << 1;
}
static inline u32 pri_ringmaster_intr_status0_disconnect_fault_v(u32 r)
{
	return (r >> 1) & 0x1;
}
static inline u32 pri_ringmaster_intr_status0_disconnect_fault_v_v(void)
{
	return 0x00000000;
}
static inline u32 pri_ringmaster_intr_status0_disconnect_fault_v_f(void)
{
	return 0x0;
}
static inline u32 pri_ringmaster_intr_status0_overflow_fault_s(void)
{
	return 1;
}
static inline u32 pri_ringmaster_intr_status0_overflow_fault_f(u32 v)
{
	return (v & 0x1) << 2;
}
static inline u32 pri_ringmaster_intr_status0_overflow_fault_m(void)
{
	return 0x1 << 2;
}
static inline u32 pri_ringmaster_intr_status0_overflow_fault_v(u32 r)
{
	return (r >> 2) & 0x1;
}
static inline u32 pri_ringmaster_intr_status0_overflow_fault_v_v(void)
{
	return 0x00000000;
}
static inline u32 pri_ringmaster_intr_status0_overflow_fault_v_f(void)
{
	return 0x0;
}
static inline u32 pri_ringmaster_intr_status1_r(void)
{
	return 0x0012005c;
}
static inline u32 pri_ringmaster_intr_status1_gbl_write_error_gpc_s(void)
{
	return 32;
}
static inline u32 pri_ringmaster_intr_status1_gbl_write_error_gpc_f(u32 v)
{
	return (v & 0xffffffff) << 0;
}
static inline u32 pri_ringmaster_intr_status1_gbl_write_error_gpc_m(void)
{
	return 0xffffffff << 0;
}
static inline u32 pri_ringmaster_intr_status1_gbl_write_error_gpc_v(u32 r)
{
	return (r >> 0) & 0xffffffff;
}
static inline u32 pri_ringmaster_intr_status1_gbl_write_error_gpc_v_v(void)
{
	return 0x00000000;
}
static inline u32 pri_ringmaster_intr_status1_gbl_write_error_gpc_v_f(void)
{
	return 0x0;
}
static inline u32 pri_ringmaster_global_ctl_r(void)
{
	return 0x00120060;
}
static inline u32 pri_ringmaster_global_ctl_ring_reset_s(void)
{
	return 1;
}
static inline u32 pri_ringmaster_global_ctl_ring_reset_f(u32 v)
{
	return (v & 0x1) << 0;
}
static inline u32 pri_ringmaster_global_ctl_ring_reset_m(void)
{
	return 0x1 << 0;
}
static inline u32 pri_ringmaster_global_ctl_ring_reset_v(u32 r)
{
	return (r >> 0) & 0x1;
}
static inline u32 pri_ringmaster_global_ctl_ring_reset_asserted_v(void)
{
	return 0x00000001;
}
static inline u32 pri_ringmaster_global_ctl_ring_reset_asserted_f(void)
{
	return 0x1;
}
static inline u32 pri_ringmaster_global_ctl_ring_reset_deasserted_v(void)
{
	return 0x00000000;
}
static inline u32 pri_ringmaster_global_ctl_ring_reset_deasserted_f(void)
{
	return 0x0;
}
static inline u32 pri_ringmaster_enum_sys_r(void)
{
	return 0x00120070;
}
static inline u32 pri_ringmaster_enum_sys_count_s(void)
{
	return 5;
}
static inline u32 pri_ringmaster_enum_sys_count_f(u32 v)
{
	return (v & 0x1f) << 0;
}
static inline u32 pri_ringmaster_enum_sys_count_m(void)
{
	return 0x1f << 0;
}
static inline u32 pri_ringmaster_enum_sys_count_v(u32 r)
{
	return (r >> 0) & 0x1f;
}
static inline u32 pri_ringmaster_enum_sys_count_none_v(void)
{
	return 0x00000000;
}
static inline u32 pri_ringmaster_enum_sys_count_none_f(void)
{
	return 0x0;
}
static inline u32 pri_ringmaster_enum_fbp_r(void)
{
	return 0x00120074;
}
static inline u32 pri_ringmaster_enum_fbp_count_s(void)
{
	return 5;
}
static inline u32 pri_ringmaster_enum_fbp_count_f(u32 v)
{
	return (v & 0x1f) << 0;
}
static inline u32 pri_ringmaster_enum_fbp_count_m(void)
{
	return 0x1f << 0;
}
static inline u32 pri_ringmaster_enum_fbp_count_v(u32 r)
{
	return (r >> 0) & 0x1f;
}
static inline u32 pri_ringmaster_enum_fbp_count_none_v(void)
{
	return 0x00000000;
}
static inline u32 pri_ringmaster_enum_fbp_count_none_f(void)
{
	return 0x0;
}
static inline u32 pri_ringmaster_enum_gpc_r(void)
{
	return 0x00120078;
}
static inline u32 pri_ringmaster_enum_gpc_count_s(void)
{
	return 5;
}
static inline u32 pri_ringmaster_enum_gpc_count_f(u32 v)
{
	return (v & 0x1f) << 0;
}
static inline u32 pri_ringmaster_enum_gpc_count_m(void)
{
	return 0x1f << 0;
}
static inline u32 pri_ringmaster_enum_gpc_count_v(u32 r)
{
	return (r >> 0) & 0x1f;
}
static inline u32 pri_ringmaster_enum_gpc_count_none_v(void)
{
	return 0x00000000;
}
static inline u32 pri_ringmaster_enum_gpc_count_none_f(void)
{
	return 0x0;
}

#endif /* __hw_pri_ringmaster_gk20a_h__ */
