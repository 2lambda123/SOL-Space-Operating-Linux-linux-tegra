/*
 * drivers/video/tegra/host/gk20a/hw_top_gk20a.h
 *
 * Copyright (c) 2012, NVIDIA Corporation.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

 /*
  * Function naming determines intended use:
  *
  *     <x>_r(void) : Returns the offset for register <x>.
  *
  *     <x>_w(void) : Returns the word offset for word (4 byte) element <x>.
  *
  *     <x>_<y>_s(void) : Returns size of field <y> of register <x> in bits.
  *
  *     <x>_<y>_f(u32 v) : Returns a value based on 'v' which has been shifted
  *         and masked to place it at field <y> of register <x>.  This value
  *         can be |'d with others to produce a full register value for
  *         register <x>.
  *
  *     <x>_<y>_m(void) : Returns a mask for field <y> of register <x>.  This
  *         value can be ~'d and then &'d to clear the value of field <y> for
  *         register <x>.
  *
  *     <x>_<y>_<z>_f(void) : Returns the constant value <z> after being shifted
  *         to place it at field <y> of register <x>.  This value can be |'d
  *         with others to produce a full register value for <x>.
  *
  *     <x>_<y>_v(u32 r) : Returns the value of field <y> from a full register
  *         <x> value 'r' after being shifted to place its LSB at bit 0.
  *         This value is suitable for direct comparison with other unshifted
  *         values appropriate for use in field <y> of register <x>.
  *
  *     <x>_<y>_<z>_v(void) : Returns the constant value for <z> defined for
  *         field <y> of register <x>.  This value is suitable for direct
  *         comparison with unshifted values appropriate for use in field <y>
  *         of register <x>.
  */

#ifndef __hw_top_gk20a_h__
#define __hw_top_gk20a_h__
/*This file is autogenerated.  Do not edit. */

static inline u32 top_num_gpcs_r(void)
{
	return 0x00022430;
}
static inline u32 top_num_gpcs_value_s(void)
{
	return 5;
}
static inline u32 top_num_gpcs_value_f(u32 v)
{
	return (v & 0x1f) << 0;
}
static inline u32 top_num_gpcs_value_m(void)
{
	return 0x1f << 0;
}
static inline u32 top_num_gpcs_value_v(u32 r)
{
	return (r >> 0) & 0x1f;
}
static inline u32 top_num_gpcs_value_default_v(void)
{
	return 0;
}
static inline u32 top_num_gpcs_value_default_f(void)
{
	return 0x0;
}
static inline u32 top_tpc_per_gpc_r(void)
{
	return 0x00022434;
}
static inline u32 top_tpc_per_gpc_value_s(void)
{
	return 5;
}
static inline u32 top_tpc_per_gpc_value_f(u32 v)
{
	return (v & 0x1f) << 0;
}
static inline u32 top_tpc_per_gpc_value_m(void)
{
	return 0x1f << 0;
}
static inline u32 top_tpc_per_gpc_value_v(u32 r)
{
	return (r >> 0) & 0x1f;
}
static inline u32 top_tpc_per_gpc_value_default_v(void)
{
	return 0;
}
static inline u32 top_tpc_per_gpc_value_default_f(void)
{
	return 0x0;
}
static inline u32 top_num_fbps_r(void)
{
	return 0x00022438;
}
static inline u32 top_num_fbps_value_s(void)
{
	return 5;
}
static inline u32 top_num_fbps_value_f(u32 v)
{
	return (v & 0x1f) << 0;
}
static inline u32 top_num_fbps_value_m(void)
{
	return 0x1f << 0;
}
static inline u32 top_num_fbps_value_v(u32 r)
{
	return (r >> 0) & 0x1f;
}
static inline u32 top_num_fbps_value_default_v(void)
{
	return 0;
}
static inline u32 top_num_fbps_value_default_f(void)
{
	return 0x0;
}
static inline u32 top_fs_status_r(void)
{
	return 0x00022500;
}
static inline u32 top_fs_status_msdec_s(void)
{
	return 1;
}
static inline u32 top_fs_status_msdec_f(u32 v)
{
	return (v & 0x1) << 1;
}
static inline u32 top_fs_status_msdec_m(void)
{
	return 0x1 << 1;
}
static inline u32 top_fs_status_msdec_v(u32 r)
{
	return (r >> 1) & 0x1;
}
static inline u32 top_fs_status_msdec_enable_v(void)
{
	return 0;
}
static inline u32 top_fs_status_msdec_enable_f(void)
{
	return 0x0;
}
static inline u32 top_fs_status_msdec_disable_v(void)
{
	return 1;
}
static inline u32 top_fs_status_msdec_disable_f(void)
{
	return 0x2;
}
static inline u32 top_fs_status_msvld_sec_s(void)
{
	return 1;
}
static inline u32 top_fs_status_msvld_sec_f(u32 v)
{
	return (v & 0x1) << 2;
}
static inline u32 top_fs_status_msvld_sec_m(void)
{
	return 0x1 << 2;
}
static inline u32 top_fs_status_msvld_sec_v(u32 r)
{
	return (r >> 2) & 0x1;
}
static inline u32 top_fs_status_msvld_sec_enable_v(void)
{
	return 0;
}
static inline u32 top_fs_status_msvld_sec_enable_f(void)
{
	return 0x0;
}
static inline u32 top_fs_status_msvld_sec_disable_v(void)
{
	return 1;
}
static inline u32 top_fs_status_msvld_sec_disable_f(void)
{
	return 0x4;
}
static inline u32 top_fs_status_msenc_s(void)
{
	return 1;
}
static inline u32 top_fs_status_msenc_f(u32 v)
{
	return (v & 0x1) << 3;
}
static inline u32 top_fs_status_msenc_m(void)
{
	return 0x1 << 3;
}
static inline u32 top_fs_status_msenc_v(u32 r)
{
	return (r >> 3) & 0x1;
}
static inline u32 top_fs_status_msenc_enable_v(void)
{
	return 0;
}
static inline u32 top_fs_status_msenc_enable_f(void)
{
	return 0x0;
}
static inline u32 top_fs_status_msenc_disable_v(void)
{
	return 1;
}
static inline u32 top_fs_status_msenc_disable_f(void)
{
	return 0x8;
}
static inline u32 top_fs_status_ce_s(void)
{
	return 3;
}
static inline u32 top_fs_status_ce_f(u32 v)
{
	return (v & 0x7) << 8;
}
static inline u32 top_fs_status_ce_m(void)
{
	return 0x7 << 8;
}
static inline u32 top_fs_status_ce_v(u32 r)
{
	return (r >> 8) & 0x7;
}
static inline u32 top_fs_status_ce_enable_v(void)
{
	return 0;
}
static inline u32 top_fs_status_ce_enable_f(void)
{
	return 0x0;
}
static inline u32 top_fs_status_ce_disable_v(void)
{
	return 1;
}
static inline u32 top_fs_status_ce_disable_f(void)
{
	return 0x100;
}
static inline u32 top_fs_status_fb_config_s(void)
{
	return 4;
}
static inline u32 top_fs_status_fb_config_f(u32 v)
{
	return (v & 0xf) << 12;
}
static inline u32 top_fs_status_fb_config_m(void)
{
	return 0xf << 12;
}
static inline u32 top_fs_status_fb_config_v(u32 r)
{
	return (r >> 12) & 0xf;
}
static inline u32 top_fs_status_fb_config_enable_v(void)
{
	return 0;
}
static inline u32 top_fs_status_fb_config_enable_f(void)
{
	return 0x0;
}
static inline u32 top_fs_status_fb_config_disable_v(void)
{
	return 1;
}
static inline u32 top_fs_status_fb_config_disable_f(void)
{
	return 0x1000;
}
static inline u32 top_fs_status_pcie_lane_s(void)
{
	return 2;
}
static inline u32 top_fs_status_pcie_lane_f(u32 v)
{
	return (v & 0x3) << 16;
}
static inline u32 top_fs_status_pcie_lane_m(void)
{
	return 0x3 << 16;
}
static inline u32 top_fs_status_pcie_lane_v(u32 r)
{
	return (r >> 16) & 0x3;
}
static inline u32 top_fs_status_pcie_lane_enable_v(void)
{
	return 0;
}
static inline u32 top_fs_status_pcie_lane_enable_f(void)
{
	return 0x0;
}
static inline u32 top_fs_status_pcie_lane_disable_v(void)
{
	return 1;
}
static inline u32 top_fs_status_pcie_lane_disable_f(void)
{
	return 0x10000;
}
static inline u32 top_fs_status_priv_sec_v(void)
{
	return 0x00022560;
}
static inline u32 top_fs_status_priv_sec_en_s(void)
{
	return 1;
}
static inline u32 top_fs_status_priv_sec_en_f(u32 v)
{
	return (v & 0x1) << 0;
}
static inline u32 top_fs_status_priv_sec_en_m(void)
{
	return 0x1 << 0;
}
static inline u32 top_fs_status_priv_sec_en_v(u32 r)
{
	return (r >> 0) & 0x1;
}
static inline u32 top_fs_status_priv_sec_en_disable_v(void)
{
	return 0;
}
static inline u32 top_fs_status_priv_sec_en_disable_f(void)
{
	return 0x0;
}
static inline u32 top_fs_status_priv_sec_en_enable_v(void)
{
	return 1;
}
static inline u32 top_fs_status_priv_sec_en_enable_f(void)
{
	return 0x1;
}
static inline u32 top_device_info_r(u32 i)
{
	return 0x00022700+(i)*4;
}
static inline u32 top_device_info__size_1_v(void)
{
	return 64;
}
static inline u32 top_device_info_value_s(void)
{
	return 32;
}
static inline u32 top_device_info_value_f(u32 v)
{
	return (v & 0xffffffff) << 0;
}
static inline u32 top_device_info_value_m(void)
{
	return 0xffffffff << 0;
}
static inline u32 top_device_info_value_v(u32 r)
{
	return (r >> 0) & 0xffffffff;
}
static inline u32 top_device_info_chain_s(void)
{
	return 1;
}
static inline u32 top_device_info_chain_f(u32 v)
{
	return (v & 0x1) << 31;
}
static inline u32 top_device_info_chain_m(void)
{
	return 0x1 << 31;
}
static inline u32 top_device_info_chain_v(u32 r)
{
	return (r >> 31) & 0x1;
}
static inline u32 top_device_info_chain_enable_v(void)
{
	return 1;
}
static inline u32 top_device_info_chain_enable_f(void)
{
	return 0x80000000;
}
static inline u32 top_device_info_chain_disable_v(void)
{
	return 0;
}
static inline u32 top_device_info_chain_disable_f(void)
{
	return 0x0;
}
static inline u32 top_device_info_engine_enum_s(void)
{
	return 4;
}
static inline u32 top_device_info_engine_enum_f(u32 v)
{
	return (v & 0xf) << 26;
}
static inline u32 top_device_info_engine_enum_m(void)
{
	return 0xf << 26;
}
static inline u32 top_device_info_engine_enum_v(u32 r)
{
	return (r >> 26) & 0xf;
}
static inline u32 top_device_info_runlist_enum_s(void)
{
	return 4;
}
static inline u32 top_device_info_runlist_enum_f(u32 v)
{
	return (v & 0xf) << 21;
}
static inline u32 top_device_info_runlist_enum_m(void)
{
	return 0xf << 21;
}
static inline u32 top_device_info_runlist_enum_v(u32 r)
{
	return (r >> 21) & 0xf;
}
static inline u32 top_device_info_intr_enum_s(void)
{
	return 5;
}
static inline u32 top_device_info_intr_enum_f(u32 v)
{
	return (v & 0x1f) << 15;
}
static inline u32 top_device_info_intr_enum_m(void)
{
	return 0x1f << 15;
}
static inline u32 top_device_info_intr_enum_v(u32 r)
{
	return (r >> 15) & 0x1f;
}
static inline u32 top_device_info_reset_enum_s(void)
{
	return 5;
}
static inline u32 top_device_info_reset_enum_f(u32 v)
{
	return (v & 0x1f) << 9;
}
static inline u32 top_device_info_reset_enum_m(void)
{
	return 0x1f << 9;
}
static inline u32 top_device_info_reset_enum_v(u32 r)
{
	return (r >> 9) & 0x1f;
}
static inline u32 top_device_info_engine_s(void)
{
	return 1;
}
static inline u32 top_device_info_engine_f(u32 v)
{
	return (v & 0x1) << 5;
}
static inline u32 top_device_info_engine_m(void)
{
	return 0x1 << 5;
}
static inline u32 top_device_info_engine_v(u32 r)
{
	return (r >> 5) & 0x1;
}
static inline u32 top_device_info_engine_valid_v(void)
{
	return 0x1;
}
static inline u32 top_device_info_engine_valid_f(void)
{
	return 0x20;
}
static inline u32 top_device_info_engine_not_valid_v(void)
{
	return 0x0;
}
static inline u32 top_device_info_engine_not_valid_f(void)
{
	return 0x0;
}
static inline u32 top_device_info_runlist_s(void)
{
	return 1;
}
static inline u32 top_device_info_runlist_f(u32 v)
{
	return (v & 0x1) << 4;
}
static inline u32 top_device_info_runlist_m(void)
{
	return 0x1 << 4;
}
static inline u32 top_device_info_runlist_v(u32 r)
{
	return (r >> 4) & 0x1;
}
static inline u32 top_device_info_runlist_valid_v(void)
{
	return 0x1;
}
static inline u32 top_device_info_runlist_valid_f(void)
{
	return 0x10;
}
static inline u32 top_device_info_runlist_not_valid_v(void)
{
	return 0x0;
}
static inline u32 top_device_info_runlist_not_valid_f(void)
{
	return 0x0;
}
static inline u32 top_device_info_intr_s(void)
{
	return 1;
}
static inline u32 top_device_info_intr_f(u32 v)
{
	return (v & 0x1) << 3;
}
static inline u32 top_device_info_intr_m(void)
{
	return 0x1 << 3;
}
static inline u32 top_device_info_intr_v(u32 r)
{
	return (r >> 3) & 0x1;
}
static inline u32 top_device_info_intr_valid_v(void)
{
	return 0x1;
}
static inline u32 top_device_info_intr_valid_f(void)
{
	return 0x8;
}
static inline u32 top_device_info_intr_not_valid_v(void)
{
	return 0x0;
}
static inline u32 top_device_info_intr_not_valid_f(void)
{
	return 0x0;
}
static inline u32 top_device_info_reset_s(void)
{
	return 1;
}
static inline u32 top_device_info_reset_f(u32 v)
{
	return (v & 0x1) << 2;
}
static inline u32 top_device_info_reset_m(void)
{
	return 0x1 << 2;
}
static inline u32 top_device_info_reset_v(u32 r)
{
	return (r >> 2) & 0x1;
}
static inline u32 top_device_info_reset_valid_v(void)
{
	return 0x1;
}
static inline u32 top_device_info_reset_valid_f(void)
{
	return 0x4;
}
static inline u32 top_device_info_reset_not_valid_v(void)
{
	return 0x0;
}
static inline u32 top_device_info_reset_not_valid_f(void)
{
	return 0x0;
}
static inline u32 top_device_info_type_enum_s(void)
{
	return 29;
}
static inline u32 top_device_info_type_enum_f(u32 v)
{
	return (v & 0x1fffffff) << 2;
}
static inline u32 top_device_info_type_enum_m(void)
{
	return 0x1fffffff << 2;
}
static inline u32 top_device_info_type_enum_v(u32 r)
{
	return (r >> 2) & 0x1fffffff;
}
static inline u32 top_device_info_type_enum_graphics_v(void)
{
	return 0;
}
static inline u32 top_device_info_type_enum_graphics_f(void)
{
	return 0x0;
}
static inline u32 top_device_info_type_enum_copy0_v(void)
{
	return 1;
}
static inline u32 top_device_info_type_enum_copy0_f(void)
{
	return 0x4;
}
static inline u32 top_device_info_type_enum_copy1_v(void)
{
	return 2;
}
static inline u32 top_device_info_type_enum_copy1_f(void)
{
	return 0x8;
}
static inline u32 top_device_info_type_enum_copy2_v(void)
{
	return 3;
}
static inline u32 top_device_info_type_enum_copy2_f(void)
{
	return 0xc;
}
static inline u32 top_device_info_type_enum_mspdec_v(void)
{
	return 8;
}
static inline u32 top_device_info_type_enum_mspdec_f(void)
{
	return 0x20;
}
static inline u32 top_device_info_type_enum_msppp_v(void)
{
	return 9;
}
static inline u32 top_device_info_type_enum_msppp_f(void)
{
	return 0x24;
}
static inline u32 top_device_info_type_enum_msvld_v(void)
{
	return 10;
}
static inline u32 top_device_info_type_enum_msvld_f(void)
{
	return 0x28;
}
static inline u32 top_device_info_type_enum_msenc_v(void)
{
	return 11;
}
static inline u32 top_device_info_type_enum_msenc_f(void)
{
	return 0x2c;
}
static inline u32 top_device_info_type_enum_sec_v(void)
{
	return 13;
}
static inline u32 top_device_info_type_enum_sec_f(void)
{
	return 0x34;
}
static inline u32 top_device_info_type_enum_vic_v(void)
{
	return 12;
}
static inline u32 top_device_info_type_enum_vic_f(void)
{
	return 0x30;
}
static inline u32 top_device_info_data_s(void)
{
	return 29;
}
static inline u32 top_device_info_data_f(u32 v)
{
	return (v & 0x1fffffff) << 2;
}
static inline u32 top_device_info_data_m(void)
{
	return 0x1fffffff << 2;
}
static inline u32 top_device_info_data_v(u32 r)
{
	return (r >> 2) & 0x1fffffff;
}
static inline u32 top_device_info_entry_s(void)
{
	return 2;
}
static inline u32 top_device_info_entry_f(u32 v)
{
	return (v & 0x3) << 0;
}
static inline u32 top_device_info_entry_m(void)
{
	return 0x3 << 0;
}
static inline u32 top_device_info_entry_v(u32 r)
{
	return (r >> 0) & 0x3;
}
static inline u32 top_device_info_entry_not_valid_v(void)
{
	return 0;
}
static inline u32 top_device_info_entry_not_valid_f(void)
{
	return 0x0;
}
static inline u32 top_device_info_entry_data_v(void)
{
	return 1;
}
static inline u32 top_device_info_entry_data_f(void)
{
	return 0x1;
}
static inline u32 top_device_info_entry_enum_v(void)
{
	return 2;
}
static inline u32 top_device_info_entry_enum_f(void)
{
	return 0x2;
}
static inline u32 top_device_info_entry_engine_type_v(void)
{
	return 3;
}
static inline u32 top_device_info_entry_engine_type_f(void)
{
	return 0x3;
}

#endif /* __hw_top_gk20a_h__ */
