/*
 * drivers/video/tegra/host/gk20a/hw_ctxsw_prog_gk20a.h
 *
 * Copyright (c) 2012, NVIDIA Corporation.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

 /*
  * Function naming determines intended use:
  *
  *     <x>_r(void) : Returns the offset for register <x>.
  *
  *     <x>_w(void) : Returns the word offset for word (4 byte) element <x>.
  *
  *     <x>_<y>_s(void) : Returns size of field <y> of register <x> in bits.
  *
  *     <x>_<y>_f(u32 v) : Returns a value based on 'v' which has been shifted
  *         and masked to place it at field <y> of register <x>.  This value
  *         can be |'d with others to produce a full register value for
  *         register <x>.
  *
  *     <x>_<y>_m(void) : Returns a mask for field <y> of register <x>.  This
  *         value can be ~'d and then &'d to clear the value of field <y> for
  *         register <x>.
  *
  *     <x>_<y>_<z>_f(void) : Returns the constant value <z> after being shifted
  *         to place it at field <y> of register <x>.  This value can be |'d
  *         with others to produce a full register value for <x>.
  *
  *     <x>_<y>_v(u32 r) : Returns the value of field <y> from a full register
  *         <x> value 'r' after being shifted to place its LSB at bit 0.
  *         This value is suitable for direct comparison with other unshifted
  *         values appropriate for use in field <y> of register <x>.
  *
  *     <x>_<y>_<z>_v(void) : Returns the constant value for <z> defined for
  *         field <y> of register <x>.  This value is suitable for direct
  *         comparison with unshifted values appropriate for use in field <y>
  *         of register <x>.
  */

#ifndef __hw_ctxsw_prog_gk20a_h__
#define __hw_ctxsw_prog_gk20a_h__
/*This file is autogenerated.  Do not edit. */

static inline u32 ctxsw_prog_fecs_header_v(void)
{
	return 0x00000100;
}
static inline u32 ctxsw_prog_main_image_size_v(void)
{
	return 0x00000004;
}
static inline u32 ctxsw_prog_main_image_num_gpc_v(void)
{
	return 0x00000008;
}
static inline u32 ctxsw_prog_main_image_patch_count_v(void)
{
	return 0x00000010;
}
static inline u32 ctxsw_prog_main_image_patch_adr_lo_v(void)
{
	return 0x00000014;
}
static inline u32 ctxsw_prog_main_image_patch_adr_hi_v(void)
{
	return 0x00000018;
}
static inline u32 ctxsw_prog_main_image_zcull_v(void)
{
	return 0x0000001c;
}
static inline u32 ctxsw_prog_main_image_zcull_mode_s(void)
{
	return 3;
}
static inline u32 ctxsw_prog_main_image_zcull_mode_f(u32 v)
{
	return (v & 0x7) << 0;
}
static inline u32 ctxsw_prog_main_image_zcull_mode_m(void)
{
	return 0x7 << 0;
}
static inline u32 ctxsw_prog_main_image_zcull_mode_v(u32 r)
{
	return (r >> 0) & 0x7;
}
static inline u32 ctxsw_prog_main_image_zcull_mode_global_v(void)
{
	return 0;
}
static inline u32 ctxsw_prog_main_image_zcull_mode_global_f(void)
{
	return 0x0;
}
static inline u32 ctxsw_prog_main_image_zcull_mode_no_ctxsw_v(void)
{
	return 1;
}
static inline u32 ctxsw_prog_main_image_zcull_mode_no_ctxsw_f(void)
{
	return 0x1;
}
static inline u32 ctxsw_prog_main_image_zcull_mode_separate_buffer_v(void)
{
	return 2;
}
static inline u32 ctxsw_prog_main_image_zcull_mode_separate_buffer_f(void)
{
	return 0x2;
}
static inline u32 ctxsw_prog_main_image_zcull_mode_part_of_regular_buf_v(void)
{
	return 3;
}
static inline u32 ctxsw_prog_main_image_zcull_mode_part_of_regular_buf_f(void)
{
	return 0x3;
}
static inline u32 ctxsw_prog_main_image_zcull_ptr_v(void)
{
	return 0x00000020;
}
static inline u32 ctxsw_prog_main_image_zcull_ptr_v_s(void)
{
	return 32;
}
static inline u32 ctxsw_prog_main_image_zcull_ptr_v_f(u32 v)
{
	return (v & 0xffffffff) << 0;
}
static inline u32 ctxsw_prog_main_image_zcull_ptr_v_m(void)
{
	return 0xffffffff << 0;
}
static inline u32 ctxsw_prog_main_image_zcull_ptr_v_v(u32 r)
{
	return (r >> 0) & 0xffffffff;
}
static inline u32 ctxsw_prog_main_image_zcull_size_v(void)
{
	return 0x00000024;
}
static inline u32 ctxsw_prog_main_image_pm_v(void)
{
	return 0x00000028;
}
static inline u32 ctxsw_prog_main_image_pm_mode_s(void)
{
	return 3;
}
static inline u32 ctxsw_prog_main_image_pm_mode_f(u32 v)
{
	return (v & 0x7) << 0;
}
static inline u32 ctxsw_prog_main_image_pm_mode_m(void)
{
	return 0x7 << 0;
}
static inline u32 ctxsw_prog_main_image_pm_mode_v(u32 r)
{
	return (r >> 0) & 0x7;
}
static inline u32 ctxsw_prog_main_image_pm_mode_no_ctxsw_v(void)
{
	return 0;
}
static inline u32 ctxsw_prog_main_image_pm_mode_no_ctxsw_f(void)
{
	return 0x0;
}
static inline u32 ctxsw_prog_main_image_pm_mode_ctxsw_v(void)
{
	return 1;
}
static inline u32 ctxsw_prog_main_image_pm_mode_ctxsw_f(void)
{
	return 0x1;
}
static inline u32 ctxsw_prog_main_image_pm_ptr_v(void)
{
	return 0x0000002c;
}
static inline u32 ctxsw_prog_main_image_pm_ptr_v_s(void)
{
	return 32;
}
static inline u32 ctxsw_prog_main_image_pm_ptr_v_f(u32 v)
{
	return (v & 0xffffffff) << 0;
}
static inline u32 ctxsw_prog_main_image_pm_ptr_v_m(void)
{
	return 0xffffffff << 0;
}
static inline u32 ctxsw_prog_main_image_pm_ptr_v_v(u32 r)
{
	return (r >> 0) & 0xffffffff;
}
static inline u32 ctxsw_prog_main_image_pm_size_v(void)
{
	return 0x00000030;
}
static inline u32 ctxsw_prog_main_image_num_save_ops_v(void)
{
	return 0x000000f4;
}
static inline u32 ctxsw_prog_main_image_num_restore_ops_v(void)
{
	return 0x000000f8;
}
static inline u32 ctxsw_prog_main_image_magic_value_v(void)
{
	return 0x000000fc;
}
static inline u32 ctxsw_prog_main_image_magic_value_v_s(void)
{
	return 32;
}
static inline u32 ctxsw_prog_main_image_magic_value_v_f(u32 v)
{
	return (v & 0xffffffff) << 0;
}
static inline u32 ctxsw_prog_main_image_magic_value_v_m(void)
{
	return 0xffffffff << 0;
}
static inline u32 ctxsw_prog_main_image_magic_value_v_v(u32 r)
{
	return (r >> 0) & 0xffffffff;
}
static inline u32 ctxsw_prog_main_image_magic_value_v_value_v(void)
{
	return 0x600dc0de;
}
static inline u32 ctxsw_prog_main_image_magic_value_v_value_f(void)
{
	return 0x600dc0de;
}
static inline u32 ctxsw_prog_local_image_size_v(void)
{
	return 0x00000000;
}
static inline u32 ctxsw_prog_local_image_ctl_v(void)
{
	return 0x00000004;
}
static inline u32 ctxsw_prog_local_image_ctl_num_ramchains_s(void)
{
	return 5;
}
static inline u32 ctxsw_prog_local_image_ctl_num_ramchains_f(u32 v)
{
	return (v & 0x1f) << 0;
}
static inline u32 ctxsw_prog_local_image_ctl_num_ramchains_m(void)
{
	return 0x1f << 0;
}
static inline u32 ctxsw_prog_local_image_ctl_num_ramchains_v(u32 r)
{
	return (r >> 0) & 0x1f;
}
static inline u32 ctxsw_prog_local_reg_ctl_v(void)
{
	return 0x0000000c;
}
static inline u32 ctxsw_prog_local_reg_ctl_offset_s(void)
{
	return 16;
}
static inline u32 ctxsw_prog_local_reg_ctl_offset_f(u32 v)
{
	return (v & 0xffff) << 0;
}
static inline u32 ctxsw_prog_local_reg_ctl_offset_m(void)
{
	return 0xffff << 0;
}
static inline u32 ctxsw_prog_local_reg_ctl_offset_v(u32 r)
{
	return (r >> 0) & 0xffff;
}
static inline u32 ctxsw_prog_local_reg_ctl_size_s(void)
{
	return 8;
}
static inline u32 ctxsw_prog_local_reg_ctl_size_f(u32 v)
{
	return (v & 0xff) << 16;
}
static inline u32 ctxsw_prog_local_reg_ctl_size_m(void)
{
	return 0xff << 16;
}
static inline u32 ctxsw_prog_local_reg_ctl_size_v(u32 r)
{
	return (r >> 16) & 0xff;
}
static inline u32 ctxsw_prog_local_ramchain_ctl_v(u32 i)
{
	return 0x00000014+(i)*8;
}
static inline u32 ctxsw_prog_local_ramchain_ctl__size_1_v(void)
{
	return 16;
}
static inline u32 ctxsw_prog_local_ramchain_ctl_offset_s(void)
{
	return 16;
}
static inline u32 ctxsw_prog_local_ramchain_ctl_offset_f(u32 v)
{
	return (v & 0xffff) << 0;
}
static inline u32 ctxsw_prog_local_ramchain_ctl_offset_m(void)
{
	return 0xffff << 0;
}
static inline u32 ctxsw_prog_local_ramchain_ctl_offset_v(u32 r)
{
	return (r >> 0) & 0xffff;
}
static inline u32 ctxsw_prog_local_ramchain_save_v(u32 i)
{
	return 0x00000018+(i)*8;
}
static inline u32 ctxsw_prog_local_ramchain_save__size_1_v(void)
{
	return 16;
}
static inline u32 ctxsw_prog_local_ramchain_save_words_s(void)
{
	return 24;
}
static inline u32 ctxsw_prog_local_ramchain_save_words_f(u32 v)
{
	return (v & 0xffffff) << 0;
}
static inline u32 ctxsw_prog_local_ramchain_save_words_m(void)
{
	return 0xffffff << 0;
}
static inline u32 ctxsw_prog_local_ramchain_save_words_v(u32 r)
{
	return (r >> 0) & 0xffffff;
}
static inline u32 ctxsw_prog_local_ramchain_save_class_s(void)
{
	return 2;
}
static inline u32 ctxsw_prog_local_ramchain_save_class_f(u32 v)
{
	return (v & 0x3) << 28;
}
static inline u32 ctxsw_prog_local_ramchain_save_class_m(void)
{
	return 0x3 << 28;
}
static inline u32 ctxsw_prog_local_ramchain_save_class_v(u32 r)
{
	return (r >> 28) & 0x3;
}
static inline u32 ctxsw_prog_local_image_ppc_info_v(void)
{
	return 0x000000f4;
}
static inline u32 ctxsw_prog_local_image_ppc_info_num_ppcs_s(void)
{
	return 16;
}
static inline u32 ctxsw_prog_local_image_ppc_info_num_ppcs_f(u32 v)
{
	return (v & 0xffff) << 0;
}
static inline u32 ctxsw_prog_local_image_ppc_info_num_ppcs_m(void)
{
	return 0xffff << 0;
}
static inline u32 ctxsw_prog_local_image_ppc_info_num_ppcs_v(u32 r)
{
	return (r >> 0) & 0xffff;
}
static inline u32 ctxsw_prog_local_image_ppc_info_ppc_mask_s(void)
{
	return 16;
}
static inline u32 ctxsw_prog_local_image_ppc_info_ppc_mask_f(u32 v)
{
	return (v & 0xffff) << 16;
}
static inline u32 ctxsw_prog_local_image_ppc_info_ppc_mask_m(void)
{
	return 0xffff << 16;
}
static inline u32 ctxsw_prog_local_image_ppc_info_ppc_mask_v(u32 r)
{
	return (r >> 16) & 0xffff;
}
static inline u32 ctxsw_prog_local_image_num_tpcs_v(void)
{
	return 0x000000f8;
}
static inline u32 ctxsw_prog_local_magic_value_v(void)
{
	return 0x000000fc;
}
static inline u32 ctxsw_prog_local_magic_value_v_s(void)
{
	return 32;
}
static inline u32 ctxsw_prog_local_magic_value_v_f(u32 v)
{
	return (v & 0xffffffff) << 0;
}
static inline u32 ctxsw_prog_local_magic_value_v_m(void)
{
	return 0xffffffff << 0;
}
static inline u32 ctxsw_prog_local_magic_value_v_v(u32 r)
{
	return (r >> 0) & 0xffffffff;
}
static inline u32 ctxsw_prog_local_magic_value_v_value_v(void)
{
	return 0xad0becab;
}
static inline u32 ctxsw_prog_local_magic_value_v_value_f(void)
{
	return 0xad0becab;
}

#endif /* __hw_ctxsw_prog_gk20a_h__ */
